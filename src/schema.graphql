scalar DateTime

type Query {
  users: [User!]!
  user(id: ID): User!
  userLog(start: DateTime, end: DateTime, id: ID!): [Entry]!
  purchases(start: DateTime, end: DateTime): [Purchase!]!
}

type Mutation {
  createUser(name: String!, email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, name: String, email: String, parentEmail: String class: String): User!
  changePassword(id: ID!, password: String!): String!
  addPoints(id: ID!, points: Int!, description: String): User!
  removePoints(id: ID!, points: Int!, description: String): User!
  purchase(id: ID!, points: String!, description: String): User!
}

type Subscription {
  dashboard: User!
  purchase: Purchase!
}

type AuthPayload {
  token: String
  user: User
}

type Entry {
  id: ID!
  change: String!
  description: String!
  postedBy: User
  createdAt: DateTime!
}

type User {
  id: ID!
  name: String!
  email: String!
  parentEmail: String
  password: String!
  balance: Int!
  log: [Entry]!
  class: String!
}

type Purchase {
  id: ID!
  description: String!
  change: String!
  createdAt: DateTime!
  postedBy: User
}
